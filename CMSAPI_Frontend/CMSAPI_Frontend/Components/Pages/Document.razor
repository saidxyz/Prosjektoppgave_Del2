@page "/document"
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Net.Http.Headers
@using CMSAPI_Frontend.Data.Models
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Web
@rendermode InteractiveServer
@inject IHttpClientFactory ClientFactory
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager

@if (selectedDocument != null)
{
    <PageTitle>@selectedDocument.Title</PageTitle>
}
else
{
    <PageTitle>New Document</PageTitle>
}


<a href="/logout">Logout</a>


<h3>Document</h3>

<button @onclick="NavigateCreateNewDocument">create totally new document</button> @if (selectedDocument != null && editingDocument == false)
{
    <button style="margin-left:8px;" @onclick="OpenUpdateDocument">EDIT</button>
    <button style="margin-left:8px;" @onclick="OpenDeleteDocument">DELETE</button>
}
@if (selectedDocumentId == null)
{
    <form>
        <label for="title">title</label>
        <br />
        <input type="text" id="title" @bind="newDocument.Title" class="form-control" />
        <br />
        <label for="content">content</label>
        <br />
        <input type="text" id="content" @bind="newDocument.Content" class="form-control" style="height:200px;" />
        <br />
        <label for="contentType">type</label>
        <br />
        <input type="text" id="contentType" @bind="newDocument.ContentType" class="form-control" />
        <br />
        <label for="parentFolder">location</label>
        <br />
        <select name="folderIdSelect" id="parentFolder" @bind="newDocument.FolderId">
            <option value=0> </option>
            @foreach (var folder in allFolders)
            {
                <option value="@folder.Id">@folder.Name</option>
            }
        </select>
        <br />
        <br />
        <button @onclick="CreateNewDocument" @onclick:preventDefault="true">Save</button>

    </form>
}
else if (selectedDocument != null && editingDocument == false)
{
    <h4>@selectedDocument.Title</h4>
    <p>in: @selectedDocument.FolderName</p>
    <p>created: @selectedDocument.CreatedDate</p>
    <p>type: @selectedDocument.ContentType</p>
    <p>@selectedDocument.Content</p>

    @if(openDeleteDocument){
        <div>
            <p>Are you sure you want to delete "@selectedDocument.Title"</p>
            <br />
            <button @onclick="DeleteDocument">DELETE</button>
        </div>
    }
}
else if (selectedDocument != null && editingDocument == true)
{
    <form>
        <label for="title">title</label>
        <br />
        <input type="text" id="title" @bind="updateDocument.Title" class="form-control" />
        <br />
        <label for="content">content</label>
        <br />
        <input type="text" id="content" @bind="updateDocument.ContentType" class="form-control" style="height:200px;" />
        <br />
        <label for="contentType">type</label>
        <br />
        <input type="text" id="contentType" @bind="updateDocument.Content" class="form-control" />
        <br />
        <label for="parentFolder">location</label>
        <br />
        <select name="folderIdSelect" id="parentFolder" @bind="updateDocument.FolderId">
            <option value=0> </option>
            @foreach (var folder in allFolders)
            {
                <option value="@folder.Id">@folder.Name</option>
            }
        </select>
        <br />
        <br />
        <button @onclick="UpdateDocument" @onclick:preventDefault="true">Save</button>

    </form>
}



@code {

    // Variables
    private DocumentDto? selectedDocument;
    private readonly CreateDocumentDto newDocument = new();

    private UpdateDocumentDto updateDocument = new();

    private List<NavigatableFolderDto> allFolders = new();

    public bool editingDocument = false;
    public bool openDeleteDocument = false;

    public string? userToken;
    public string? responseBody;

    public string? selectedDocumentId;


    // ON STARTUP

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "key");


            if (userToken == null)
            {
                NavManager.NavigateTo("/login");
            }

            if (userToken != null)
            {

                var hasSelected = await JSRuntime.InvokeAsync<Boolean>("localStorage.hasOwnProperty", "selectedDocumentId");
                if (hasSelected)
                {

                    selectedDocumentId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "selectedDocumentId");

                    selectedDocument = await FetchDocumentById(selectedDocumentId);

                    updateDocument.Title = selectedDocument.Title;
                    updateDocument.ContentType = selectedDocument.ContentType;
                    updateDocument.FolderId = selectedDocument.FolderId;
                    updateDocument.Content = selectedDocument.Content;

                    await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "selectedDocumentId");
                }




                var deserializedResponse = await GetFolders();

            }
        }
    }


    // CREATE NEW DOCUMENT

    private async Task CreateNewDocument()
    {
        if (newDocument.Title == null || newDocument.Title == "")
        {
            Console.WriteLine("CannotMakeDocument");
        }
        else if (newDocument.FolderId == 0)
        {
            Console.WriteLine("folder ID cannot be 0");
        }
        else
        {
            newDocument.FolderName = allFolders.First(f => f.Id == newDocument.FolderId).Name;

            var requestMessage = new HttpRequestMessage()
                {
                    Method = new HttpMethod("POST"),
                    RequestUri = new Uri("https://localhost:7225/api/Document"),
                    Content = JsonContent.Create(newDocument)
                };


            requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", userToken);
            var response = await Http.SendAsync(requestMessage);

            if (response.IsSuccessStatusCode)
            {
                responseBody = await response.Content.ReadAsStringAsync();

                var deserializedResponse = JsonSerializer.Deserialize<DocumentDto>(responseBody, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "selectedDocumentId", deserializedResponse.Id);

                NavManager.NavigateTo("/document", forceLoad: true);


            }
            else
            {
                Console.WriteLine(response.StatusCode);
            }
        }

    }



    // NAVIGATION

    private void NavigateCreateNewDocument()
    {
        NavManager.NavigateTo("/document", forceLoad: true);
    }



    // GET DOCUMENT
    private async Task<DocumentDto> FetchDocumentById(string? id)
    {
        var requestMessage = new HttpRequestMessage()
            {
                Method = new HttpMethod("GET"),
                RequestUri = new Uri($"https://localhost:7225/api/Document/{id}")
            };

        requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", userToken);

        var response = await Http.SendAsync(requestMessage);

        if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            NavManager.NavigateTo("/login");
        }

        if (!response.IsSuccessStatusCode)
        {
            NavManager.NavigateTo("/Error");
        }

        responseBody = await response.Content.ReadAsStringAsync();

        var deserializedResponseDocument = JsonSerializer.Deserialize<DocumentDto>(responseBody, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

        StateHasChanged();

        return deserializedResponseDocument;


    }


    //  UPDATE DOCUMENT
    private async Task UpdateDocument()
    {
        if (updateDocument.Title == null || updateDocument.Title == "")
        {
            Console.WriteLine("CannotUpdateDocument");
        }
        else if (updateDocument.FolderId == 0)
        {
            Console.WriteLine("folder ID cannot be 0");
        }
        else
        {
            updateDocument.FolderName = allFolders.First(f => f.Id == updateDocument.FolderId).Name;

            var requestMessage = new HttpRequestMessage()
                {
                    Method = new HttpMethod("PUT"),
                    RequestUri = new Uri($"https://localhost:7225/api/Document/{selectedDocument.Id}"),
                    Content = JsonContent.Create(updateDocument)
                };


            requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", userToken);
            var response = await Http.SendAsync(requestMessage);

            if (response.IsSuccessStatusCode)
            {

                requestMessage = new HttpRequestMessage()
                    {
                        Method = new HttpMethod("GET"),
                        RequestUri = new Uri($"https://localhost:7225/api/Document/{selectedDocument.Id}")
                    };
                requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", userToken);
                response = await Http.SendAsync(requestMessage);

                if (response.IsSuccessStatusCode)
                {
                    responseBody = await response.Content.ReadAsStringAsync();

                    var deserializedResponse = JsonSerializer.Deserialize<DocumentDto>(responseBody, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "selectedDocumentId", deserializedResponse.Id);

                    NavManager.NavigateTo("/document", forceLoad: true);

                }
                else{
                    Console.WriteLine(response.StatusCode);
                }

            }
            else
            {
                Console.WriteLine(response.StatusCode);
            }
        }

    }

    private void OpenUpdateDocument()
    {
        editingDocument = true;
    }

    private void CloseUpdateDocument()
    {
        editingDocument = false;
    }

    //  DELETE DOCUMENT
    private async Task DeleteDocument()
    {
        if (selectedDocument == null)
        {
            Console.WriteLine("CannotDeleteDocument: no document selected");
        }
        else
        {
            updateDocument.FolderName = allFolders.First(f => f.Id == updateDocument.FolderId).Name;

            var requestMessage = new HttpRequestMessage()
                {
                    Method = new HttpMethod("DELETE"),
                    RequestUri = new Uri($"https://localhost:7225/api/Document/{selectedDocument.Id}"),
                };


            requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", userToken);
            var response = await Http.SendAsync(requestMessage);

            if (response.IsSuccessStatusCode)
            {

                NavManager.NavigateTo("/document", forceLoad: true);

            }
            else
            {
                Console.WriteLine(response.StatusCode);
            }
        }

    }

    private void OpenDeleteDocument()
    {
        openDeleteDocument = true;
    }

    private void CloseDeleteDocument()
    {
        openDeleteDocument = false;
    }

    // GET ALL FOLDERS

    private async Task<List<NavigatableFolderDto>> GetFolders()
    {
        var requestMessage = new HttpRequestMessage()
            {
                Method = new HttpMethod("GET"),
                RequestUri = new Uri("https://localhost:7225/api/Folder")
            };

        requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", userToken);

        var response = await Http.SendAsync(requestMessage);

        if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            NavManager.NavigateTo("/login");
        }

        if (!response.IsSuccessStatusCode)
        {
            NavManager.NavigateTo("/Error");
        }

        responseBody = await response.Content.ReadAsStringAsync();

        var deserializedResponse = JsonSerializer.Deserialize<List<NavigatableFolderDto>>(responseBody, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

        allFolders.Clear();
        foreach (var folder in deserializedResponse)
        {
            allFolders.Add(folder);
        }
        StateHasChanged();
        return deserializedResponse;
    }



}
