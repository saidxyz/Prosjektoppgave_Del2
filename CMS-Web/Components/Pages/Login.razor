@page "/login"
@using System.Text.Json
@using System.Timers
@using CMS_Web.Data.Models
@rendermode InteractiveServer
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime JSRuntime
@inject HttpClient Client
@inject NavigationManager NavManager

<PageTitle>Login</PageTitle>

<h3>Login</h3>

<div class="form-group">
    <form>
        <label for="username">Username</label>
        <input type="text" id="username" class="form-control" @bind="loginDto.Username" required />
        <br />

        <label for="password">pass the word</label>
        <input type="password" id="password" class="form-control" @bind="loginDto.Password" required />

        <br />
        <button class="btn btn-primary" type="submit" @onclick="OnLoginClick" @onclick:preventDefault="true">Login</button>
    </form>

    <a href="/register">don't have an account yet? register here.</a>

    @if (showFeedback)
    {
        <div style="border:solid 1px red;padding-left:8px;margin-top:16px;">
            <p style="color:red;margin:0;">@feedback</p>
        </div>
    }

</div>


@code {
    private readonly LoginDto loginDto = new();
    public string? feedback;
    private bool showFeedback = false;
    private Timer feedbackTimer;

    public async Task OnLoginClick()
    {

        if (string.IsNullOrEmpty(loginDto.Username) || string.IsNullOrEmpty(loginDto.Password))
        {
            feedback = "E-mail and password are required.";
            ShowFeedback();
            return;
        }

        var requestMessage = new HttpRequestMessage()
            {
                Method = new HttpMethod("POST"),
                RequestUri = new Uri("https://localhost:7238/api/Auth/Login"),
                Content = JsonContent.Create(loginDto)
            };

        var client = ClientFactory.CreateClient();
        HttpResponseMessage? response = null;
        
        try
        {
            response = await client.SendAsync(requestMessage);

        }
        catch (Exception ex)
        {
            feedback = $"An error occurred: {ex.Message}";
            ShowFeedback();
            return;

        }
        if (response != null)
        {
            string responseBody = await response.Content.ReadAsStringAsync();
            Console.WriteLine(responseBody);
            
            switch (response.StatusCode)
            {
                case System.Net.HttpStatusCode.BadRequest:
                    feedback = "Invalid Username or password.";                    
                    break;
                    
                case System.Net.HttpStatusCode.OK:
                    var deserializeResponseBody = JsonSerializer.Deserialize<Dictionary<string, string>>(responseBody);
                    if (deserializeResponseBody != null && deserializeResponseBody.ContainsKey("token"))
                    {
                        var token = deserializeResponseBody["token"];
                        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", token);
                        feedback = "Login successful! Redirecting shortly.";
                        await Task.Delay(500);
                        NavManager.NavigateTo("/");
                    }
                    else
                    {
                        feedback = "Login failed. Please check your credentials.";
                        ShowFeedback();
                    }
                    break;
                    
                default:
                    feedback = "An error occurred while processing your login. Please try again.";
                    ShowFeedback();
                    break;
            }
        }
        ShowFeedback();
    }
    private void ShowFeedback()
    {
        showFeedback = true;
        StartFeedbackTimer();
    }
    
    private void StartFeedbackTimer()
    {
        feedbackTimer = new Timer(5000);
        feedbackTimer.Elapsed += async (_, _) => await HideFeedback();
        feedbackTimer.Start();
    }

    private async Task HideFeedback()
    {
        feedbackTimer.Stop();
        showFeedback = false;
        await InvokeAsync(StateHasChanged);
    }


}
