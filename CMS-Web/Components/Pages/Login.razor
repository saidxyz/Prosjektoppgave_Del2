@page "/login"
@using System.Text.Json
@using System.Timers
@using CMS_Web.Data.Models
@using CMS_Web.Service
@rendermode InteractiveServer
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime JSRuntime
@inject HttpClient Client
@inject NavigationManager NavManager
@inject LoginStateService LoginStateService

<PageTitle>Login</PageTitle>

<h3>Login</h3>

<div class="form-group">
    <form>
        <label for="username">Username</label>
        <input type="text" id="username" class="form-control" @bind="loginDto.Username" required />
        <br />

        <label for="password">Password</label>
        <input type="password" id="password" class="form-control" @bind="loginDto.Password" required />

        <br />
        <button class="btn btn-primary" type="submit" @onclick="OnLoginClick" @onclick:preventDefault="true">Login</button>
    </form>

    <a href="/register">Don't have an account yet? Register here.</a>

    @if (showFeedback)
    {
        <div style="border:solid 1px red;padding-left:8px;margin-top:16px;">
            <p style="color:red;margin:0;">@feedback</p>
        </div>
    }

</div>

@code {
    private readonly LoginDto loginDto = new();
    private string? feedback;
    private bool showFeedback = false;
    private bool isLoggingIn = false;  // Flag to prevent multiple clicks
    private Timer feedbackTimer;

    public async Task OnLoginClick()
    {
        if (isLoggingIn) return;  // Prevent further clicks until login is complete
        isLoggingIn = true;  // Set the flag to indicate login in progress

        // Validate inputs
        if (string.IsNullOrEmpty(loginDto.Username) || string.IsNullOrEmpty(loginDto.Password))
        {
            feedback = "Username and password are required.";
            ShowFeedback();
            isLoggingIn = false;  // Reset flag to allow future clicks
            return;
        }

        var requestMessage = new HttpRequestMessage()
        {
            Method = new HttpMethod("POST"),
            RequestUri = new Uri("https://localhost:7238/api/Auth/Login"),
            Content = JsonContent.Create(loginDto)
        };

        var client = ClientFactory.CreateClient();
        HttpResponseMessage? response = null;

        try
        {
            response = await client.SendAsync(requestMessage);
        }
        catch (Exception ex)
        {
            feedback = $"An error occurred: {ex.Message}";
            ShowFeedback();
            isLoggingIn = false;  // Reset flag on error
            return;
        }

        if (response != null)
        {
            string responseBody = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Response body: " + responseBody);

            switch (response.StatusCode)
            {
                case System.Net.HttpStatusCode.BadRequest:
                    feedback = "Invalid Username or password.";
                    break;

                case System.Net.HttpStatusCode.OK:
                    var deserializeResponseBody = JsonSerializer.Deserialize<Dictionary<string, string>>(responseBody);
                    if (deserializeResponseBody != null && deserializeResponseBody.ContainsKey("token"))
                    {
                        var token = deserializeResponseBody["token"];
                        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", token);
                        Console.WriteLine("Token saved to localStorage: " + token);

                        // Mark as logged in
                        LoginStateService.SetLoginStatus(true);

                        feedback = "Login successful! Redirecting shortly.";
                        // Add delay before redirect to ensure user sees feedback
                        await Task.Delay(1000);

                        NavManager.NavigateTo("/dashboard");
                    }
                    else
                    {
                        feedback = "Login failed. Please check your credentials.";
                        ShowFeedback();
                    }
                    break;

                default:
                    feedback = "An error occurred while processing your login. Please try again.";
                    ShowFeedback();
                    break;
            }
        }

        isLoggingIn = false;  // Reset flag after processing login
        ShowFeedback();
    }

    private void ShowFeedback()
    {
        showFeedback = true;
        StartFeedbackTimer();
    }

    private void StartFeedbackTimer()
    {
        feedbackTimer = new Timer(1000); // Show feedback for 5 seconds
        feedbackTimer.Elapsed += async (_, _) => await HideFeedback();
        feedbackTimer.Start();
    }

    private async Task HideFeedback()
    {
        feedbackTimer.Stop();
        showFeedback = false;
        await InvokeAsync(StateHasChanged);
    }
}
