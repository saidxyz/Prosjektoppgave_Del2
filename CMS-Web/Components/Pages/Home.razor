@page "/"
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Net.Http.Headers
@using CMS_Web.Data.Models
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Web
@rendermode InteractiveServer
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager


<PageTitle>@currentFolder.Name</PageTitle>

<a href="/logout">Logout</a>

<h1>@currentFolder.Name</h1>
<h4>@currentFolder.Url</h4>
@if (openNewFolder)
{
    <div>
        <h3>add new folder</h3>
        <form>
            <label for="newFolderName">new folder name:</label>
            <input type="text" id="newFolderName" class="form-control" @bind="newFolder.Name" required />
            <br />
            <button class="btn btn-primary" type="submit" @onclick="AddFolder" @onclick:preventDefault="true">Add Folder</button>
        </form>
    </div>
}
@if (openEditFolder)
{
    <div>
        <h3>
            edit folder @targetEditFolder.Name
        </h3>
        <form>
            <label for="editFolderName">edit folder name:</label>
            <input type="text" id="editFolderName" class="form-control" @bind="editFolder.Name" required />
            <br />
            <label for="selectParent">change location:</label>
            <select name="parentFolderSelect" id="selectParent" @bind="editFolder.ParentFolderId">
                @foreach(var folder in allFolders){
                    <option value="@folder.Id">@folder.Name</option>
                }
            </select>
            <br />
            <button class="btn btn-primary" type="submit" @onclick="EditFolder" @onclick:preventDefault="true">Edit Folder</button>
        </form>
    </div>
}
@if (openDeleteFolder)
{
    <div>
        <h3>delete folder @targetDeleteFolder.Name?</h3>
        <p>Are you sure you want to delete folder @targetDeleteFolder.Name?</p>
        <button class="btn btn-primary" type="submit" @onclick="DeleteFolder">Delete Folder</button>
    </div>
}
<div>
    <button @onclick="OpenNewFolder">New Folder</button>
</div>

@if (childFolders.Count > 0)
{
    @foreach (var folder in childFolders)
    {
        <div>
            <button style="background-color: transparent; border: none; color: rebeccapurple;" class="childButton" @onclick="()=>NavigateToFolder(folder)">
                @folder.Name
            </button>
            <button class="childButton" @onclick="()=>OpenEditFolder(folder)">
                EDIT
            </button>
            <button class="childButton" @onclick="()=>OpenDeleteFolder(folder)">
                DELETE
            </button>
        </div>
    }

}

<br />
<h4>Documents</h4>
<a href="/document"><button>New Document</button></a>
@if (childDocuments.Count > 0)
{
    @foreach (var document in childDocuments)
    {
        <div><button @onclick="()=>OnSelectDocument(document)">@document.Title</button></div>
    }
} else {
    <div>No documents found</div>
}




@code {
    public bool openNewFolder = false;
    public bool openEditFolder = false;
    public bool openDeleteFolder = false;

    public string? userToken;
    public string? responseBody;

    private List<NavigatableFolderDto> childFolders = new();
    private List<NavigatableFolderDto> allFolders = new();

    private List<DocumentDto> childDocuments = new();

    private readonly CreateFolderDto newFolder = new();
    private readonly CreateFolderDto editFolder = new();
    private NavigatableFolderDto? targetEditFolder;
    private NavigatableFolderDto? targetDeleteFolder;
    private NavigatableFolderDto currentFolder = new() { Name = "Root" };

    // ON STARTUP

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "key");


            if (userToken == null)
            {
                NavManager.NavigateTo("/login");
            }

            if (userToken != null)
            {

                var deserializedResponse = await GetFolders();

                UpdateCurrentFolder(deserializedResponse, "/Root");


            }
        }
    }

    // GET ALL NEW FOLDERS

    private async Task<List<NavigatableFolderDto>> GetFolders()
    {
        var requestMessage = new HttpRequestMessage()
            {
                Method = new HttpMethod("GET"),
                RequestUri = new Uri("https://localhost:7238/api/Folder")
            };
        //new LoginDto { Password = "Bobby123!", Email = "bob@bobs.com" }

        requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", userToken);

        var response = await Http.SendAsync(requestMessage);

        if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            NavManager.NavigateTo("/login");
        }

        if (!response.IsSuccessStatusCode)
        {
            NavManager.NavigateTo("/Error");
        }

        responseBody = await response.Content.ReadAsStringAsync();

        //var deserializedResponse = JsonSerializer.Deserialize<NavigatableFolderDto>(responseBody, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

        var deserializedResponse = JsonSerializer.Deserialize<List<NavigatableFolderDto>>(responseBody, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

        allFolders.Clear();
        foreach(var folder in deserializedResponse){
            allFolders.Add(folder);
        }

        return deserializedResponse;
    }


    // ADD NEW FOLDER

    private async Task AddFolder()
    {
        if (newFolder.Name == null || newFolder.Name == "" || newFolder.Name.ToLower() == "root")
        {
            Console.WriteLine("CannotMakeFolder");

        }
        else
        {

            newFolder.ParentFolderId = currentFolder.Id;

            var requestMessage = new HttpRequestMessage()
                {
                    Method = new HttpMethod("POST"),
                    RequestUri = new Uri("https://localhost:7238/api/Folder"),
                    Content = JsonContent.Create(newFolder)
                };


            requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", userToken);
            var response = await Http.SendAsync(requestMessage);

            if (response.IsSuccessStatusCode)
            {

                var folders = await GetFolders();

                UpdateCurrentFolder(folders, currentFolder.Url);


            }
            else
            {
                Console.WriteLine(response.StatusCode);
            }
        }

        CloseNewFolder();

    }

    private void OpenNewFolder()
    {
        CloseOtherFields("new");
        openNewFolder = true;
    }

    private void CloseNewFolder()
    {
        openNewFolder = false;
    }



    // EDIT FOLDER

    private async Task EditFolder()
    {


        if (editFolder.Name == null || editFolder.Name == "" || editFolder.Name.ToLower() == "root")
        {
            Console.WriteLine("CannotMakeFolder");
            Console.WriteLine($"need to select parent folder, edit folder parent: {editFolder.ParentFolderId}");

        }
        else if(targetEditFolder == null){
            Console.WriteLine("Invalid target edit folder");
        }
        else
        {

            var requestMessage = new HttpRequestMessage()
                {
                    Method = new HttpMethod("PUT"),
                    RequestUri = new Uri($"https://localhost:7238/api/Folder/{HttpUtility.UrlEncode(targetEditFolder.Url)}"),
                    Content = JsonContent.Create(editFolder)
                };


            requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", userToken);
            var response = await Http.SendAsync(requestMessage);

            if (response.IsSuccessStatusCode)
            {

                var folders = await GetFolders();

                UpdateCurrentFolder(folders, currentFolder.Url);

            }
            else {
                Console.WriteLine(response.ToString());
            }
        }

        CloseEditFolder();

    }

    private void OpenEditFolder(NavigatableFolderDto targetFolder){
        CloseOtherFields("edit");
        targetEditFolder = targetFolder;
        openEditFolder = true;
    }

    private void CloseEditFolder(){
        openEditFolder = false;
    }


    // DELETE FOLDER


    private async Task DeleteFolder()
    {

        var childFolders = allFolders.Where(cf => cf.ParentFolder?.Id == targetDeleteFolder?.Id).ToList();

        if (targetDeleteFolder == null)
        {
            Console.WriteLine("Cannot Delete Folder");
            Console.WriteLine($"target delet folder is null");

        } else if(targetDeleteFolder.Documents.Count > 0 || childFolders.Count > 0){
            Console.WriteLine("Cannot delete target folder still has content");
        }
        else
        {

            var requestMessage = new HttpRequestMessage()
                {
                    Method = new HttpMethod("DELETE"),
                    RequestUri = new Uri($"https://localhost:7238/api/Folder/{HttpUtility.UrlEncode(targetDeleteFolder.Url)}"),
                };


            requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", userToken);
            var response = await Http.SendAsync(requestMessage);

            if (response.IsSuccessStatusCode)
            {

                var folders = await GetFolders();

                UpdateCurrentFolder(folders, currentFolder.Url);

            }
            else
            {
                Console.WriteLine(response.ToString());
            }
        }

        CloseDeleteFolder();

    }

    private void OpenDeleteFolder(NavigatableFolderDto targetFolder)
    {
        CloseOtherFields("delete");
        targetDeleteFolder = targetFolder;
        openDeleteFolder = true;
    }

    private void CloseDeleteFolder()
    {
        openDeleteFolder = false;
    }



    // NAVIGATION

    private async Task NavigateToFolder(NavigatableFolderDto selectedFolder){
        var folders = await GetFolders();
        currentFolder = selectedFolder;

        UpdateCurrentFolder(folders, currentFolder.Url);

    }

    private async Task OnSelectDocument(DocumentDto document){

        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "selectedDocumentId", document.Id);

        NavManager.NavigateTo("/document");
    }


    // STATE UPDATE


    private void UpdateCurrentFolder(List<NavigatableFolderDto> folders, string url)
    {
        currentFolder = folders.First(f => f.Url== url);

        if (currentFolder.Documents.Count > 0)
        {
            childDocuments.Clear();
            foreach (var document in currentFolder.Documents)
            {
                childDocuments.Add(document);
            }
        }

        if (folders != null)
        {
            childFolders.Clear();
            foreach (var folder in folders)
            {
                if (folder.ParentFolder != null && folder.ParentFolder.Id == currentFolder.Id)
                {
                    childFolders.Add(folder);
                }

            }
        }

        StateHasChanged();
    }


    private void CloseOtherFields(string currentField){

        switch(currentField){
            case "new":
                CloseDeleteFolder();
                CloseEditFolder();
                break;
            case "edit":
                CloseNewFolder();
                CloseDeleteFolder();
                break;
            case "delete":
                CloseNewFolder();
                CloseEditFolder();
                break;
        }

    }

}